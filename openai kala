#include <Wire.h>
#include <DHT.h>
#include <avr/interrupt.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

#define DHT11_PIN A1
#define DHTTYPE DHT11
DHT dht(DHT11_PIN, DHTTYPE);

// Sensor Pins
#define Hit_aPin 4
#define IR1Pin A3            
#define moistureSensorPin A2
#define rainSensorPin A0
#define TrigPin1 11
#define EchoPin1 10

// Motor Pins
#define motor_board_input_pin_IN1 9   // Motor 1 PWM
#define motor_board_input_pin_IN2 6   // Motor 1 Direction
#define motor_board_input_pin_IN3 5   // Motor 2 PWM
#define motor_board_input_pin_IN4 3   // Motor 2 Direction

bool showFirstSet = true;

void setup() {
  // Sensor & Interrupt Setup
  pinMode(Hit_aPin, INPUT_PULLUP);
  PCICR |= B00000100;
  PCMSK2 |= B00010100;
  
  // Pin Setup
  pinMode(TrigPin1, OUTPUT);
  pinMode(EchoPin1, INPUT);
  pinMode(motor_board_input_pin_IN1, OUTPUT);
  pinMode(motor_board_input_pin_IN2, OUTPUT);
  pinMode(motor_board_input_pin_IN3, OUTPUT);
  pinMode(motor_board_input_pin_IN4, OUTPUT);
  
  // Ensure motors start OFF
  stopMotors();
  
  // LCD & DHT Setup
  lcd.init();
  lcd.backlight();
  lcd.clear();
  dht.begin();
  
  pinMode(IR1Pin, INPUT); // IR sensor as analog input
}

void loop() {
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int sensor_analog = analogRead(moistureSensorPin);
  float moisture_percentage = (100 - ((sensor_analog / 1023.0) * 100));
  int rainSensorValue = analogRead(rainSensorPin);
  int distance = getDistance(EchoPin1, TrigPin1);
  int irSensor = analogRead(IR1Pin);
  
  lcd.clear();
  if (showFirstSet) {
    lcd.setCursor(0, 0);
    lcd.print("T:"); lcd.print(temperature); lcd.print("C H:"); lcd.print(humidity); lcd.print("%");
    lcd.setCursor(0, 1);
    lcd.print("M:"); lcd.print(moisture_percentage); lcd.print("% R:");
    lcd.print((rainSensorValue < 600) ? "Y" : "N");
  } else {
    lcd.setCursor(0, 0);
    lcd.print("Ultrasonic:"); lcd.print(distance); lcd.print("cm");
    lcd.setCursor(0, 1);
    lcd.print("IR Sensor: "); lcd.print(irSensor);
  }
  
  delay(5000);
  showFirstSet = !showFirstSet;
  
  // Move forward at speed 100 (both motors at the same speed and same direction)
  moveForward(100);
}

// Interrupt for target hit detection
ISR(PCINT2_vect) {
  if (!digitalRead(Hit_aPin)) {
    stopMotors();  // Stop motors when target is hit
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Target Hit!");
    delay(3000);
    lcd.clear();
  }
}

// Ultrasonic Distance Function
int getDistance(int EchoPin, int TrigPin) {
  digitalWrite(TrigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(TrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin, LOW);
  return pulseIn(EchoPin, HIGH) / 58;
}

// Revised forward movement: Both wheels get the same direction and speed.
void moveForward(int speed) {
  speed = constrain(speed, 0, 255);
  
  // Both motors move forward when their direction pins are set HIGH.
  digitalWrite(motor_board_input_pin_IN2, HIGH);
  digitalWrite(motor_board_input_pin_IN4, HIGH);
  
  // Set the same PWM value for both motors.
  analogWrite(motor_board_input_pin_IN1, speed);
  analogWrite(motor_board_input_pin_IN3, speed);
}

// Stop Motors Function
void stopMotors() {
  analogWrite(motor_board_input_pin_IN1, 0);
  analogWrite(motor_board_input_pin_IN3, 0);
}
